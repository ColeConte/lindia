df <- read.csv(url, stringsAsFactors = F, as.is = TRUE)
df <- df[-1, ]
section.inds <- which(df$section %in% c("W", "U", "W1", "W2", "X", "", "W3", "W4", "Section"))
section.inds
df <- df[-section.inds,]
head(df)
space.inds <- grep("^[::space::]", df$course.name)
space.inds
head(df)
df <- df[-space.inds,]
head(df)
space.inds <- grep("^[::space::]", df$course.name)
shiny::runApp('~/R/TestShiny')
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE)
heads(course)
head(course)
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE)
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t")
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_spring.tsv", sep="\t", header=TRUE)
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_spring.tsv", sep="\t", header=TRUE)
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE)
course <- read.table("https://raw.githubusercontent.com/yeukyul/datasets/master/course_spring.tsv", sep="\t", header=TRUE)
scs <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
scs.overall <- scs[1,]
scs <- scs[-1, ]
inds.wu <- which(scs$section %in% c("W", "U", "W1", "W2", "X"))
scs <- scs[-inds.wu,]
shiny::runApp('~/R/TestShiny')
names(scs)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/GitHub/fce_visualizer')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
course <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE)
scs_instr <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/instr_scs.tsv", sep="\t", header=TRUE)
course <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE)
course <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE, fill = TRUE)
names(course)
head(course)
fall <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE, fill = TRUE)
spring <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_spring.tsv", sep="\t", header=TRUE, fill = TRUE)
summer1<- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_summer1.tsv", sep="\t", header=TRUE, fill = TRUE)
summer2 <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_summer2.tsv", sep="\t", header=TRUE, fill = TRUE)
names(summer1)
head(summer1$Course.name)
fall <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE, fill = TRUE,
stringAsFactor = FALSE)
fall <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/course_fall.tsv", sep="\t", header=TRUE, fill = TRUE,
stringsAsFactors = FALSE)
head(summer1$Course.name)
unlevel(summer1$Course.name)
as.character(summer1$Course.name)
names(summer1)
head(summer$Course.number)
head(summer1$Course.number)
shiny::runApp('~/R/TestShiny')
names(summer1)
textOutput("courseNumer"),
textOutput("courseNumer"),)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
ind <- which(as.character(schedule$Course.number) == substr("02-120 ", 1,6))
schedule <- fall
ind <- which(as.character(schedule$Course.number) == substr("02-120 ", 1,6))
ind
ind <- which(as.character(schedule$Course.number) == substr("02-201 ", 1,6))
ind
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
names(fall)
shiny::runApp('~/R/TestShiny')
names(fall)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
?as.string
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
?str_replace
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
rateMyProfessor <- read.table(file = "https://github.com/seandkim/tartanhack2017/blob/master/sean/data/rmpID.tsv", sep="\t", header=TRUE, fill = TRUE,
stringsAsFactors = FALSE)
rateMyProfessor <- read.table(file = "https://raw.githubusercontent.com/seandkim/tartanhack2017/master/sean/data/rmpID.tsv?token=AV9HXYPBWjTwC6akfcyvV7G87tqwT9Fsks5YqKGkwA%3D%3D", sep="\t", header=TRUE, fill = TRUE,
stringsAsFactors = FALSE)
names(rateMyProfessor)
names(Instru)
names(instructor)
head(rateMyProfessor$Instructor)
head(Instructor$instructor)
head(instructor$Instructor)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
names(rateMyProfessor)
shiny::runApp('~/R/TestShiny')
names(schedule)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
names(instructor)
shiny::runApp('~/R/TestShiny')
names(instructor)
shiny::runApp('~/R/TestShiny')
names(instructor)
shiny::runApp('~/R/TestShiny')
class(instructor$Course)
aggregate.inds <- which(as.character(instructors$Course) == "0")
aggregate.inds <- which(as.character(instructor$Course) == "0")
aggregate.inds
head(instructor$Course[aggregate()])
head(instructor$Course[aggregate.inds])
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
getwd()
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
getwd()
setwd("../lindia")
library(devtools)
devtools::document()
MoM <- read.delim("~/Desktop/Academic/S17/36402/HW/4/MoM.txt")
View(MoM)
nampd <- read.csv("~/Desktop/Academic/S17/36402/HW/4/nampd.csv", stringsAsFactors=FALSE)
View(nampd)
names(MoM)
names(nampd)
plot(ln_old_mass, ln_mass, data = nampd)
plot(nampd$ln_old_mass, nampd$ln_mass)
plot(nampd$ln_old_mass, nampd$ln_mass, xlab = "old mass", ylab = "new mass", main = "Distributuion of new mass of species by old mass")
plot(exp(nampd$ln_old_mass), nampd$ln_mass, xlab = "old mass", ylab = "new mass", main = "Distributuion of new mass of species by old mass")
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass", ylab = "new mass", main = "Distributuion of new mass of species by old mass")
getwd()
library(rmarkdown)
render()
render('README.Rmd')
render('README.Rmd')
render('README.Rmd')
yeukyul_315_theme <- theme(
plot.title = element_text(size = 18, color = "#816852", family = "Copperplate Light", margin = margin(0, 0, 10, 0)),
text = element_text(size = 14, color = "#8A594C", family = "Copperplate Light" ),
legend.key = element_rect(fill = "white"),
legend.background = element_rect(fill = "white"),
panel.grid.major = element_line(colour = "white"),
panel.grid.minor = element_blank(),
axis.text.x = element_text(size = rel(0.7), color = "rosybrown4", family = "Roboto"),
axis.text.y = element_text(size = rel(0.7), color = "rosybrown4", family = "Roboto"),
axis.title = element_text(size = 10, family = "Julius Sans One"),
axis.title.y = element_text(margin = margin(0, 10, 0, 0)),
axis.title.x = element_text(margin = margin(10, 0, 0, 0))
)
hr <- c(1400, 1430, 1500, 1530, 1600, 1630, 1700, 1750, 1800, 1830)
mph <- c(35, 38, 36, 40, 39, 40, 45, 50, 51, 52)
df <- data.frame(hr = hr, mph = mph)
ggplot(data = df, aes(x = hr, y = df)) + geom_density()
mph <- c(mph, 60)
ggplot(data = df, aes(x = hr, y = df)) + geom_density()
ggplot(data = df, aes(x = hr, y = mph)) + geom_density()
names(df)
ggplot(data = df, aes(x = hr, y = mph)) + geom_density()
ggplot(data = df) + geom_density(aes(x = hr, y = mph))
ggplot(data = df, aes(x = hr)) + geom_histogram()
ggplot(data = df, aes(x = hr, y = mph)) + geom_density()
ggplot(data = df, aes(x = hr, y = mph)) + geom_point()
ggplot(data = df, aes(x = hr, y = mph)) + geom_curve()
ggplot(data = df) + geom_curve(aes(x = hr[-1,], y = mph[-1,]))
df1 <- df[-1,]
df2 <- df[-nrow(df),]
ggplot(data = df) + geom_curve(aes(x = df1$hr, y = df2$mph, xend = df2$hr, yend = df2$hr))
df1
df2
ggplot(data = df) + geom_curve(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df1$mph))
ggplot(data = df) + geom_curve(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph))
ggplot(data = data.frame(df)) + geom_curve(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph))
ggplot() + geom_curve(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph))
ggplot(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_line() + geom_point()
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = hr, y = mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph), width = 2) + geom_point(aes(x = df1$hr, y = df1$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph), linewidth = 2) + geom_point(aes(x = df1$hr, y = df1$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph), size = 1.2) + geom_point(aes(x = df1$hr, y = df1$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph), size = 1.1) + geom_point(aes(x = df1$hr, y = df1$mph))
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph), size = 1.1) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph") + geom_hline(yintercept = 40, linetype = "dotted")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph") + geom_hline(yintercept = 50, color = "indianred3" linetype = "dotted")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph") + geom_hline(yintercept = 50, color = "indianred3", linetype = "dotted")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph") + geom_hline(yintercept = 45, size = 2, color = "indianred3", linetype = "dotted")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + ggtitle("Cars at I-279 mph") + xlab("time") + ylab("mph") + geom_hline(yintercept = 45, size = 1.5, color = "indianred3", linetype = "dotted")
ggplot() + geom_line(aes(x = df1$hr, y = df1$mph, xend = df2$hr, yend = df2$mph)) + geom_point(aes(x = df1$hr, y = df1$mph)) + yeukyul_315_theme + xlab("time") + ylab("mph") + geom_hline(yintercept = 45, size = 1.5, color = "indianred3", linetype = "dotted")
render("./README.Rmd")
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass", ylab = "new mass", main = "Distributuion of new mass of species by old mass")
line(reg.line.1)
reg.line.1 <- lm(ln_mass ~ ln_old_mass, data = nampd)
line(reg.line.1)
lines(reg.line.1)
y <- fitted(reg.line.1)
curve(x, y)
y <- exp(fitted(reg.line.1))
x <- exp(nampd$ln_old_mass)
lines(x ,y)
names(reg.line.1)
reg.line.1$na.action
reg.line.1$na.action["omit"]
length(fitted(reg.line.1))
length(nampd$ln_old_mass)
reg.line.1 <- lm(ln_mass ~ ln_old_mass, data = nampd)
length(fitted(reg.line.1))
model.matrix(head(reg.line.1))
head(model.matrix(reg.line.1))
y <- exp(fitted(reg.line.1))
x <- exp(mode.matrix(reg.line.1)[, "ln_old_mass"] )
y <- exp(fitted(reg.line.1))
x <- exp(model.matrix(reg.line.1)[, "ln_old_mass"] )
lines(x ,y)
lines(x ,y, col = "red")
summary(reg.line.1)
library(np)
?npreg
np.reg.2 <- npreg(ln_mass ~ ln_old_mass, data = nampd)
plot(np.reg.2)
names(nnp.reg.2)
names(np.reg.2)
?npreg
names(reg.line.1)
?cook.distance
?cooks.distance
mod <- cars_lm
ggplot(mod, aes(.hat, .stdresid)) +
geom_point(aes(size = .cooksd)) +
geom_smooth(se = FALSE, size = 0.5)
plot(mod)
ggplot(mod, aes(.hat, .stdresid)) +
geom_point(aes(size = .cooksd)) +
geom_smooth(se = FALSE, size = 0.5)
fitted(np.reg.2)
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass (grams)", ylab = "new mass (grams)", main = "Fitted Kernel Regression")
lines(x, exp(fitted(np.reg.2)), main = "fitted kernel estimates")
np.reg.2 <- npreg(ln_mass ~ ln_old_mass, data = nampd)
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass (grams)", ylab = "new mass (grams)", main = "Fitted Kernel Regression")
ord <- order(x)
lines(x[ord], exp(fitted(np.reg.2))[ord],col = "red", main = "fitted kernel estimates")
lines(x ,y, col = "blue")
legend(8e+06, 3e+06, c("linear model", "kernel regression"))
legend(8e+06, 3e+06, c("linear model", "kernel regression"),lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
legend(6e+06, 3e+06, c("linear model", "kernel regression"),lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
legend(3e+06, 8e+06, c("linear model", "kernel regression"),lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
legend(2e+06, 8e+06, c("linear model", "kernel regression"),lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass (grams)", ylab = "new mass (grams)", main = "Fitted Kernel Regression")
ord <- order(x)
lines(x ,y, col = "blue")
lines(x[ord], exp(fitted(np.reg.2))[ord],col = "red", main = "fitted kernel estimates")
legend(2e+06, 8e+06, c("linear model", "kernel regression"),lty=c(1,1),lwd=c(2.5,2.5),col=c("blue","red"))
library(bootstrap)
install.packages("bootstrap")
library(bootstrap)
install.packages("boot")
install.packages("boot")
residuals(np.reg.2)
sampling.dist.np <- replicate(1000, est.q95.np(resample(residuals(np.reg.2))))
resample <- function(x) {
sample(x,size = length(x), replace = TRUE)
}
est.q95.np <- function(x) { quantile(x,0.95) }
sampling.dist.np <- replicate(1000, est.q95.np(resample(residuals(np.reg.2))))
sampling.dist.np <- replicate(100, est.q95.np(resample(residuals(np.reg.2))))
est.q95.np
sampling.dist.np
confi.95 <- est.q95.np(est.q95.np(resample(residuals(np.reg.2))))
confi.95
lines(x[ord], exp(fitted(np.reg.2))[ord] - confi.95,col = "red", main = "fitted kernel estimates", lty = 3)
lines(x[ord], exp(fitted(np.reg.2))[ord] + confi.95,col = "red", main = "fitted kernel estimates", lty = 3)
plot(exp(nampd$ln_old_mass), exp(nampd$ln_mass), xlab = "old mass (grams)", ylab = "new mass (grams)", main = "Fitted Kernel Regression")
lines(x[ord], exp(fitted(np.reg.2))[ord] - confi.95,col = "red", main = "fitted kernel estimates", lty = 3)
residuals(np.reg.2)
exp(confi.95)
confi.95 <- exp(est.q95.np(est.q95.np(resample(residuals(np.reg.2)))))
lines(x[ord], exp(fitted(np.reg.2))[ord],col = "red", main = "fitted kernel estimates")
lines(x[ord], exp(fitted(np.reg.2))[ord] - confi.95,col = "red", main = "fitted kernel estimates", lty = 3)
lines(x[ord], exp(fitted(np.reg.2))[ord] + confi.95,col = "red", main = "fitted kernel estimates", lty = 3)
x_max > 10e15
x_max <- 10e15
x_max
render("README.Rmd")
detach("package:lindia", unload=TRUE)
detach("package:ggplot2", unload=TRUE)
detach("package:gridExtra", unload=TRUE)
devtools::install_github("yeukyul/lindia")
devtools::load_all()
devtools::install_github("yeukyul/lindia")
devtools::load_all()
library(ggplot2)
devtools::load_all()
library(ggplot2)
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
detach("lidia")
detach("lindia")
detach(lindia)
head(sampling.dist.np)
est <- est.q95.np(resample_residuals())
resample_residuals <- function() {
return (fitted(np.reg.2) + resample(residuals(np.reg.2)))
}
est <- est.q95.np(resample_residuals())
head(resample_residuals <- function() {
return (fitted(np.reg.2) + resample(residuals(np.reg.2)))
)
head(est)
est
est <- exp(est.q95.np(resample_residuals()))
lines(x[ord], exp(fitted(np.reg.2))[ord] - est,col = "red", main = "fitted kernel estimates", lty = 3)
lines(x[ord], exp(fitted(np.reg.2))[ord] + est,col = "red", main = "fitted kernel estimates", lty = 3)
lines(x[ord], exp(fitted(np.reg.2))[ord] + est.95ci ,col = "red", lty = 3)
est.95ci <- exp(est.q95.np(resample_residuals()))
legend(2e+06, 8e+06, c("linear model", "kernel regression", "95% confidence interval brand"),lty=c(1,1,3),lwd=c(2.5,2.5),col=c("blue","red", "red"))
legend(2e+06, 8e+06, c("linear model", "kernel regression", "95% CI"),lty=c(1,1,3),lwd=c(2.5,2.5),col=c("blue","red", "red"))
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
id.name <- paste(as.character(fce$course.id), fce$course.name, sep = " - ")
year.term <- paste(as.character(fce$year), fce$term)
fce$id.name <- id.name
fce$year.term <- year.term
head(fce)
setwd("/Users/edwardlee/Github/datasets")
write.csv(fce, "fce_all_modified.csv")
shiny::runApp('~/R/TestShiny')
scs <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(scs)
which(scs$course.id == "36315")
scs[which(scs$course.id == "36315"), ]
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
names(scs)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
dim(Scs)
dim(Scs)
dim(scs)
scs <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_scs.csv", stringsAsFactors = F, as.is = TRUE)
dim(Scs)
dim(scs)
all_instr <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/instr_all.tsv", sep="\t", header=TRUE)
dim(all_instr)
scs_instr <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/instr_scs.tsv", sep="\t", header=TRUE)
dim(scs_instr)
shiny::runApp('~/R/TestShiny')
fce_all <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
fce_all <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce_all)
class(fce_all$course.id)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
names(scs)
dim(Scs)
dim(scs)
fce_all <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce_all)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- compute.term(fce)
# compute year.term
get.term <- function(row) {
term = row$term
year = as.numeric(row$year)
if (term == "Summer") {
return (year + .6)
}
if (term == "Spring") {
return (year + .1)
}
if (term == "Fall") {
return (year + .8)
}
return (year)
}
compute.term <- function(df) {
year.term <- c()
for (i in 1:nrow(df)) {
year.term = c(year.term, get.term(df[i,]))
}
df$year.term <- year.term
return(df)
}
fce <- compute.term(fce)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F, as.is = TRUE)
names(fce)
fce <- compute.term(fce)
write.csv(fce, "fce_all_modified.csv")
head(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
names(fce)
head(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(fce)
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(fce)
write.csv(fce, "fce_all_modified.csv")
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(fce)
fce <- compute.term(fce)
head(fce)
write.csv(fce, "fce_all_modified.csv")
head(fce)
write.csv(fce, "fce_all_modified.csv")
fce <- read.csv("https://raw.githubusercontent.com/yeukyul/datasets/master/fce_all_modified.csv", stringsAsFactors = F)
head(fce)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
devtools::install_github("yeukyul/lindia")
devtools::install_github("yeukyul/lindia")
library(lindia)
detach(ggplot2)
detach("ggplot2")
shiny::runApp('~/R/TestShiny')
all_instr <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/instr_all.tsv", sep="\t", header=TRUE)
names(all_instr)
scs_instr <- read.table(file = "https://raw.githubusercontent.com/yeukyul/datasets/master/instr_scs.tsv", sep="\t", header=TRUE)
names(scs_instr)
shiny::runApp('~/R/TestShiny')
?toupper
head(fce_all)
shiny::runApp('~/R/TestShiny')
shiny::runApp('~/R/TestShiny')
plot(cars_lm)
detach("package::ggplot2", unload = TRUE)
detach("package:gridExtra", unload = TRUE)
detach("package:ggplot2", unload = TRUE)
detach("package:gridExtra", unload = TRUE)
devtools::install_github("yeukyul/lindia")
devtools::install_github("yeukyul/lindia", force = TRUE)
gg_diagnose(cars_lm)
library(lindia)
gg_diagnose(cars_lm)
?lindia
getwd()
setwd("../lindia")
devtools::load_all()
